import java.util.Iterator;

import edu.princeton.cs.algs4.StdIn;

public class DoublingStackOfStrings<Item> implements Iterable<Item> {
	private int N;
	private Item[] items = (Item[]) new Object[1];

	public boolean isEmpty() {
		return items[1] == null;
	}

	public int arraySize() {
		return items.length;
	}

	public void push(Item item) {
		if (N == items.length)
			resize(N * 2);
		items[N++] = item;
	}

	public Item pop() {
		Item item = items[--N];
		items[N] = null;
		if (N > 0 && N == items.length / 4)
			resize(items.length / 2);
		return item;
	}

	public void resize(int max) {
		Item[] items2 = (Item[]) new Object[max];
		for (int i = 0; i < max; i++) {
			items2[i] = items[i];
		}
		items = items2;
	}

	@Override
	public Iterator<Item> iterator() {
		return new ArrayIterator();
	}

	private class ArrayIterator implements Iterator<Item> {
		private int i = N;

		@Override
		public boolean hasNext() {
			return i > 0;
		}

		@Override
		public Item next() {
			return items[--i];
		}
	}

	public static void main(String[] args) {
		DoublingStackOfStrings<String> s = new DoublingStackOfStrings<String>();
		String[] inputs = StdIn.readAllStrings();
		for (int i = 0; i < inputs.length; i++) {
			if (inputs[i].equals("-"))
				s.pop();
			else
				s.push(inputs[i]);
		}
		for (String temp : s) {
			System.out.print(temp + " ");
		}
		System.out.println();
		System.out.println("ArraySize: " + s.arraySize());
		System.out.println();
	}
}
