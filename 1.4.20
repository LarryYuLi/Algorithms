public class BitonicSearch {

	public static int max(int[] a) {
		int len = a.length;
		if (a == null || len < 3)
			return -1;
		if (a[0] > a[1]) {
			return 0;
		}
		if (a[len - 1] > a[len - 2]) {
			return len - 1;
		}

		int mid = 0;
		int left = 1;
		int right = len - 2;
		while (left < right) {
			mid = (left + right) / 2;
			if (a[mid - 1] < a[mid]) {
				left = mid + 1;
			} else if (a[mid + 1] < a[mid]) {
				right = mid - 1;
			} else {
				return mid;
			}
		}
		return right;
	}

	public static int bitonicSearch(int a[], int key) {
		if (a == null || a.length < 4) {
			System.out.println("该数组不是双调数组");
			return -1;
		}

		int maxIndex = max(a);

		if (a[maxIndex] > key) {
			int left = 0;
			int right = maxIndex;
			int mid = 0;

			while (left <= right) {
				mid = (left + right) / 2;
				if (a[mid] < key) {
					left = mid + 1;
				} else if (a[mid] > key) {
					right = mid - 1;
				} else
					return mid;
			}

			int left2 = maxIndex;
			int right2 = a.length - 1;
			while (left2 <= right2) {
				mid = (left2 + right2) / 2;
				if (a[mid] < key) {
					right2 = mid - 1;
				} else if (a[mid] > key) {
					left2 = mid + 1;
				} else {
					return mid;
				}
			}
			return -1;
		} else if (a[maxIndex] < key) {
			return -1;
		} else {
			return maxIndex;
		}
	}

	public static void main(String[] args) {
		int[] bitonicArray = { 1, 2, 3, 4, 5, 6, 100, 89, 9, 8, 7 };
		int resultIndex = bitonicSearch(bitonicArray, 5);
		if (resultIndex == -1) {
			System.out.print("不包含给定整数");
		} else {
			System.out.print("包含给定整数,index值为" + resultIndex);
		}
	}
}
