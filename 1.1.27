public class test {
	private static int count = 0;
	private static int count2 = 0;
	private static double[][] Matrix;
	
	public static double binomial(int N, int k, double p) {
		count++;
		if(N == 0 && k == 0) return 1.0;
		if(N<0 || k<0) return 0.0;
		return (1.0 - p)*binomial(N-1,k,p) + p*binomial(N-1,k-1,p);
	}
	
	public static double bin(int N, int k, double p) {
		count2++;
		if(N == 0 && k == 0) return 1.0;
		if(N<0 || k<0) return 0.0;
		if(Matrix[N][k]==-1) Matrix[N][k] = (1.0 - p) * bin(N - 1, k, p) + p * bin(N - 1, k - 1, p);
		//将计算结果存起来，已经计算过的直接拿过来用，无需再递归计算
		return Matrix[N][k];
	}
	
	public static double betterBinomial(int N, int k, double p) {
		Matrix = new double[N+1][k+1];
		for(int i=0;i<N+1;i++) {
			for(int j=0;j<k+1;j++) {
				Matrix[i][j] = -1;
			}
		}
		return bin(N, k, p);
	}
	
	public static void main(String[] args) {
//		System.out.println("result"+binomial(100, 50, 0.25)+";count:"+count);
		System.out.println("result"+betterBinomial(100, 50, 0.25)+";count2:"+count2);
	}
}
